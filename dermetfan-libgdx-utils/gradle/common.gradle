buildscript {
	repositories { jcenter() }
	dependencies { classpath 'us.carrclan.david.gradle:gradle-site-plugin:0.2.0' }
}

ext {
	libName = 'libgdx-utils'
	nameAppendix = project == rootProject ? '' : (project.parent != rootProject ? project.parent.nameAppendix + '-' : '') + project.name
	nameFull = libName + (nameAppendix.empty ? '' : "-$nameAppendix")
	libgdxVersion = '1.4.1'
}

group = 'net.dermetfan.libgdx-utils'
version = '0.9.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: us.carrclan.david.gradle.site.SitePlugin // http://issues.gradle.org/browse/GRADLE-2136
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'announce'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

// java

sourceCompatibility = 1.7

sourceSets {
	main {
		java.srcDirs = ['src/main']
		resources.srcDirs = ['src/main']
	}
	test.java.srcDirs = ['src/test']
	site.resources.srcDirs = [javadoc.destinationDir.parentFile, testReportDir.parentFile]
}

jar {
	baseName = libName
	appendix = nameAppendix
	manifest.attributes += [
			'web': 'http://dermetfan.net',
			'bitbucket': 'http://bitbucket.org/dermetfan/libgdx-utils',
			'license': 'Apache-2.0',
			'group': project.group,
			'artifact': nameFull,
			'version': project.version,
			'libGDX': libgdxVersion,
			'java': targetCompatibility,
			'timestamp': System.currentTimeMillis()
	]
}

javadoc {
	title = nameFull
	File argFile = file("$rootProject.projectDir/gradle/javadoc-${System.getProperty('java.version').subSequence(0, 3)}-args")
	if(!argFile.exists())
		argFile = file("$rootProject.projectDir/gradle/javadoc-args")
	options.optionFiles argFile
}

// distribution

task distSources(type: Jar, group: 'distribution') {
	description = 'Assembles a jar archive containing the main sources and resources.'
	from sourceSets.main.java
	from sourceSets.main.resources
	baseName = libName
	appendix = nameAppendix
	classifier = 'sources'
	destinationDir = jar.destinationDir
	manifest = jar.manifest
} << { announce.local.send "$nameFull $version", 'Distributed sources' }

task distJavadoc(type: Jar, dependsOn: javadoc, group: 'distribution') {
	description = 'Assembles a jar archive containing the javadoc.'
	from javadoc.destinationDir
	baseName = libName
	appendix = nameAppendix
	classifier = 'javadoc'
	destinationDir = jar.destinationDir
	manifest = jar.manifest
} << { announce.local.send "$nameFull $version", 'Distributed javadoc' }

task distBundle(type: Zip, dependsOn: [jar, distSources, distJavadoc], group: 'distribution') {
	description = 'Assembles a zip archive containing the binary, source and javadoc archives as well as the LICENSE file.'
	from jar.archivePath
	from distSources.archivePath
	from distJavadoc.archivePath
	from "$rootDir/LICENSE"
	baseName = libName
	appendix = nameAppendix
	destinationDir = jar.destinationDir
} << { announce.local.send "$nameFull $version", 'Distributed bundle' }

// upload

artifacts {
	archives distSources, distJavadoc
}

uploadArchives {
	doFirst { announce.local.send "$nameFull $version", 'Uploading archives artifacts...' }
	repositories.mavenDeployer {
		beforeDeployment { signing.signPom(it) }
		repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
			authentication(userName: property('sonatype_jira_username'), password: property('sonatype_jira_password'))
		}
		snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
			authentication(userName: property('sonatype_jira_username'), password: property('sonatype_jira_password'))
		}
		pom.withXml { asNode().appendNode('packaging', 'jar') } // http://issues.gradle.org/browse/GRADLE-1200
		pom.project {
			name nameFull
			description "support library for libGDX${!nameAppendix.empty ? " ($nameAppendix module)" : ''}"
			url 'http://dermetfan.net'
			licenses {
				license {
					name 'Apache 2.0'
					url 'http://apache.org/licenses/LICENSE-2.0.txt'
				}
			}
			developers {
				developer {
					name 'Robin Stumm'
					email 'serverkorken@gmail.com'
					url 'http://dermetfan.net'
					organization = 'dermetfan' // http://issues.gradle.org/browse/GRADLE-1200
					organizationUrl 'http://dermetfan.net'
				}
			}
			scm {
				connection 'scm:hg:http://bitbucket.org/dermetfan/libgdx-utils'
				developerConnection 'scm:hg:http://bitbucket.org/dermetfan/libgdx-utils'
				url 'http://bitbucket.org/dermetfan/libgdx-utils'
			}
		}
	}
} << { announce.local.send "$nameFull $version",  'Uploaded archives artifacts'}

site {
	url = "ftp://dermetfan.net/$libName${nameAppendix.empty ? '' : '/' + nameAppendix}"
	authenticationInfo {
		userName = property 'site_ftp_username'
		password = property 'site_ftp_password'
	}
}

publishSite {
	dependsOn javadoc
	group = 'upload'
	doFirst {
		baseDir.mkdirs() // workaround issue #2 https://bitbucket.org/davidmc24/gradle-site-plugin/issue/2/publishsite-basedir-is-not-automatically
		announce.local.send "$nameFull $version", "Uploading javadoc to ${url}..."
	}
} << { announce.local.send "$nameFull $version", "Uploaded javadoc to $url" }

// signing

signing.sign configurations.archives

gradle.taskGraph.whenReady {
	signArchives {
		enabled = !version.endsWith('-SNAPSHOT') && gradle.taskGraph.hasTask(uploadArchives) // workaround for signing.setRequired(..)
	} << { announce.local.send "$nameFull $version", 'Signed archives artifacts' }
}

// IDE integration

eclipse {
	project.name = nameFull
	classpath {
		sourceSets -= sourceSets.site
		containers = ["org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-$targetCompatibility"]
	}
}

task fixNewlines(description: 'makes sure all text files end with \\n') << {
	int count = 0
	fileTree(rootProject.projectDir).visit {
		if(!it.file.isDirectory()) {
			String mime = java.nio.file.Files.probeContentType(java.nio.file.Paths.get(it.file.path))
			if((mime.startsWith("text/") ||	mime.equals("application/xml")) && !it.file.text.endsWith('\n')) {
				it.file.text += '\n'
				count++
			}
		}
	}
	if(count > 0)
		announce.local.send nameFull, "added newline to $count ${count == 1 ? 'file' : 'files'}"
}

defaultTasks 'fixNewlines'

// methods

Object property(String property) {
	return hasProperty(property) ? project[property] : ''
}
